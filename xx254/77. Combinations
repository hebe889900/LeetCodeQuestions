public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        
        if(n == 0 || k == 0)
            return res;
            
        dfs(1, k, path, n, res);
        
        return res;
    }
    
    public void dfs(int start, int still, List<Integer> path, int n, List<List<Integer>> res){
        
        if(still == 0){
            res.add(new ArrayList<Integer>(path));
            return;
        }
        
        for(int i = start; i <= n - still + 1; i++){
            path.add(i);
            dfs(i + 1, still - 1, path, n, res);
            path.remove(path.size() - 1);
        }
    }
}
