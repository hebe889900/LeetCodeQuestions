//Follow up:
//Could you solve it in linear time?

// 1. Naive Solution

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        int[] empty = new int[0];           // empty array init
        if(nums == null || nums.length == 0 || nums.length < k)     // !! consider len == 0
            return empty;
        
            

        int[] res = new int[nums.length - k + 1];
       
        for(int i = 0; i < nums.length - k + 1; i++){
            int max = Integer.MIN_VALUE;
            for(int j = i; j < k + i; j++){
                max = Math.max(max, nums[j]);
            }
            res[i] = max;
        }
        
        return res;
    }
}

// 2. Linear-time Solution
//*** https://segmentfault.com/a/1190000003903509 ***
//reverseOrder() is not ReverseOrder()
//PriorityQueue  remove, offer, peek
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
            
        int[] empty = new int[0];
        if(nums == null || nums.length == 0 || nums.length < k){
            return empty;
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());    
        int[] res = new int[nums.length - k + 1];
        
        for(int i = 0; i < nums.length; i++){
            if(i >= k){
                pq.remove(nums[i-k]);
            }
            pq.offer(nums[i]);
            if(i > k - 2){
                res[i - k + 1] = pq.peek();
            }
        }
        return res;
    }
}
