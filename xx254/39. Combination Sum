public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        
        if(candidates == null || candidates.length == 0)
            return res;
        
        Arrays.sort(candidates);
        
        dfs(0, target, res, path, candidates);
        
        return res;
    }
    
    public void dfs(int pos, int target, List<List<Integer>> res, List<Integer> path, int[] candidates){
        
        if(target < 0)
            return;
            
        if(target == 0){
            res.add(new ArrayList<Integer>(path));
            return;
        }
  
        for(int i = pos; i < candidates.length; i++){
            path.add(candidates[i]);
            dfs(i, target - candidates[i], res, path, candidates);
            path.remove(path.size() - 1);
        }
    }
}
