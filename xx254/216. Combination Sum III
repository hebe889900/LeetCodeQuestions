public class Solution {
    
    public List<List<Integer>> combinationSum3(int k, int n) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        
        if (k == 0 || n == 0) {
            return res;
        }

        dfs(1, k, n, path, res);
        
        return res;
    }
    
    public void dfs(int pos, int still, int n, List<Integer> path, List<List<Integer>> res) {

        if (still == 0 && n == 0) {
            res.add(new ArrayList<Integer>(path));   
        }
        
        for (int i = pos; i <= 9; i++) {        
        
            path.add(i);
            dfs(i + 1, still - 1, n - i, path, res);
            path.remove(path.size() - 1);
        }
    }
}
