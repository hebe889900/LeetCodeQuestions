/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 // transition between Integer and ListNode
 
public class Solution {

    private Comparator<ListNode> ListNodeComparator = new Comparator<ListNode>() {
        public int compare(ListNode left, ListNode right) {
        /*
            if (left == null) {
                return 1;
            } else if (right == null) {
                return -1;
            }
        */
            return left.val - right.val;
        }
    };
    
    public ListNode mergeKLists(ListNode[] lists) {
        
        int n = lists.length;
        if(lists == null || n == 0)
            return null;
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>(ListNodeComparator);
        ListNode res = new ListNode(0);
        ListNode head = res;                // important !!
        
        for(int i = 0; i < n; i++){
            if(lists[i] != null)
                pq.offer(lists[i]);         //head pointer
        }
        
        while(pq.size() > 0){

            res.next = pq.poll();           //instead of peek()
            res = res.next;
            
            if(res.next != null)
                pq.offer(res.next);
        }
        return head.next;
    }
}
