public class Solution {
    
     private Comparator<Map.Entry<Integer, Integer>> Comparator = new Comparator<Map.Entry<Integer, Integer>>() {
         public int compare(Map.Entry<Integer, Integer> m1, Map.Entry<Integer, Integer> m2) {
            return m1.getValue() - m2.getValue();
         }
     };
     
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> h = new HashMap<>();
        for(int n: nums){
            if(h.containsKey(n)){
                h.put(n, h.get(n)+1);
            }
            else{
                h.put(n, 1);
            }
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(Comparator);
 
        
        for (Map.Entry<Integer, Integer> entry : h.entrySet()){
            pq.offer(entry);
            if(pq.size() > k)
                pq.poll();
            
        }
        
        List<Integer> ans = new ArrayList<Integer>();
        for (Map.Entry<Integer, Integer> entry : pq)
            ans.add(entry.getKey());
        return ans;
    }
}
