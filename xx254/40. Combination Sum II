public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        Arrays.sort(candidates);
        
        dfs(0, candidates, target, path, res);
        
        return res;
    }
    
    public void dfs(int pos, int[] candidates, int target, List<Integer> path, List<List<Integer>> res) {
        int pre = -10086;
        
        if (target < 0) {
            return;
        }
        if (target == 0) {
            res.add(new ArrayList<Integer>(path));   
        }
        
        for (int i = pos; i < candidates.length; i++) {
            
            if (candidates[i] == pre) {
                continue;
            }
            
            pre = candidates[i];
            
            path.add(candidates[i]);
            dfs(i + 1, candidates, target - candidates[i], path, res);
            path.remove(path.size() - 1);
        }
    }
}
